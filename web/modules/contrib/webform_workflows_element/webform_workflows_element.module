<?php

/**
 * @file
 * Primary module hooks for Webform Workflows Element module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityMalformedException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\webform\Element\WebformMessage;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformSubmissionForm;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\webform_workflows_element\Element\WebformWorkflowsElement;
use Drupal\webform_workflows_element\Service\WebformWorkflowsManager;
use Drupal\workflows\Entity\Workflow;

require __DIR__ . '/webform_workflows_element.logs.inc';
require __DIR__ . '/webform_workflows_element.results_filter.inc';
require __DIR__ . '/webform_workflows_element.colors.inc';

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * @throws EntityMalformedException
 */
function webform_workflows_element_webform_submission_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $account = Drupal::currentUser();
  $webform = $entity->getWebform();

  $workflow_elements = webform_workflows_element_get_available_elements($webform, $account);

  if (count($workflow_elements) > 0 && webform_workflows_element_show_workflow_edit_form($entity)) {
    $form = Drupal::service('entity.form_builder')->getForm($entity, 'edit');

    $build = array_merge(
      $build,
      [
        'form' => $form,
      ],
    );
  }

  if (webform_workflows_element_check_show_log('view', $entity)) {
    $build = array_merge(
      $build,
      webform_workflows_element_get_rendered_log($entity),
    );
  }
}

/**
 * Get workflow elements from form.
 *
 * @param Webform $webform
 * @param AccountInterface $account
 *
 * @return array
 */
function webform_workflows_element_get_available_elements(Webform $webform, AccountInterface $account): array {
  $workflowsManager = Drupal::service('webform_workflows_element.manager');
  $workflow_elements = $workflowsManager->getWorkflowElementsForWebform($webform);

  foreach ($workflow_elements as $workflow_element_id => $workflow_element) {
    $elementAccess = !$workflowsManager->checkUserCanAccessElement($account, $webform, $workflow_element);
    if ($elementAccess) {
      unset($workflow_elements[$workflow_element_id]);
    }
  }

  return $workflow_elements;
}

/**
 * Implements hook_webform_element_access().
 */
function webform_workflows_element_webform_element_access($operation, array &$element, AccountInterface $account = NULL, array $context = []) {
  $accessProperty = '#access_' . $operation . '_workflow_enabled';

  if (isset($element['#workflow'])) {
    if (!isset($element[$accessProperty])) {
      if ($operation == 'create') {
        return AccessResult::forbidden();
      }
      return AccessResult::neutral();
    }

    if (!$element[$accessProperty]) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Determine whether we are showing a minimal workflow edit form.
 *
 * @return bool
 *   Whether to show the workflow edit form on the current page.
 */
function webform_workflows_element_show_workflow_edit_form(WebformSubmissionInterface $webform_submission): bool {
  $currentRoute = Drupal::routeMatch()->getRouteName();
  $onSubmissionViewPage = in_array($currentRoute, [
    'entity.webform_submission.canonical',
    'entity.node.webform_submission.canonical',
    'entity.webform.user.submission',
  ]);

  if (!$onSubmissionViewPage) {
    return FALSE;
  }

  $showForAnyElement = FALSE;
  $account = Drupal::currentUser();
  $workflowsManager = Drupal::service('webform_workflows_element.manager');

  $webform = $webform_submission->getWebform();
  if (!$webform) {
    return FALSE;
  }

  $workflow_elements = $workflowsManager->getWorkflowElementsForWebform($webform);

  foreach ($workflow_elements as $element_id => $element) {
    if (!isset($element['#show_workflow_form_on_view']) || $element['#show_workflow_form_on_view']) {
      $hasAccess = $workflowsManager->checkUserCanAccessElement($account, $webform, $element);
      if ($hasAccess) {
        $submissionElement = $webform_submission->getElementData($element_id);
        if ($submissionElement) {
          $availableTransitions = WebformWorkflowsElement::getAvailableTransitions(array_merge($element, $submissionElement), $webform_submission);
        }
        else {
          $availableTransitions = WebformWorkflowsElement::getAvailableTransitions($element, $webform_submission);
        }

        // If setting enabled, hide completely
        if (count($availableTransitions) == 0 && isset($element['#hide_if_no_transitions']) && $element['#hide_if_no_transitions']) {
          $showForAnyElement = FALSE;
        }
        else {
          $showForAnyElement = TRUE;
          break;
        }
      }
    }
  }

  return $showForAnyElement;
}

/**
 * Add JS for forms, modify workflow form, show editable workflow on submission
 * view if enabled.
 *
 * @param mixed $form
 * @param FormStateInterface $form_state
 * @param mixed $form_id
 */
function webform_workflows_element_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Editing the workflow element itself:
  if ($form_id == 'webform_ui_element_form') {
    $form['#attached']['library'][] = 'webform_workflows_element/webform_workflows_element.edit_element';
    return;
  }

  // For the workflow edit form, show which workflows are used:
  if ($form_id == 'workflow_edit_form') {
    webform_workflows_element_add_webforms_to_workflow_edit($form, $form_state);
    return;
  }

  // For workflow state deletion, give option to transfer any submissions to a different state:
  if ($form_id == 'workflow_state_delete_form') {
    webform_workflows_element_add_reassign_submission_states_on_delete($form, $form_state);
    return;
  }

  // Get form object.
  $form_object = $form_state->getFormObject();
  if (!$form_object) {
    return;
  }

  if (strpos($form_id, 'webform_submission') === 0
    && $form_object instanceof WebformSubmissionForm) {

    $webform = Webform::load($form['#webform_id']);
    $account = Drupal::currentUser();
    $workflow_elements = webform_workflows_element_get_available_elements($webform, $account);

    // Show the webform workflow as editable on the submission view:
    if (!method_exists($form_object, 'getEntity')) {
      return;
    }

    $webform_submission = $form_object->getEntity();

    if (count($workflow_elements) > 0) {
      // Attach JS
      $form['#attached']['library'][] = 'webform_workflows_element/webform_workflows_element.states';
      $form['#attached']['library'][] = 'webform_workflows_element/webform_workflows_element.ui';
    }

    $form['#after_build'][] = 'webform_workflows_element_element_form_after_build';

    $reduceFormToWorkflowOnly = webform_workflows_element_show_workflow_edit_form($webform_submission);

    if ($reduceFormToWorkflowOnly) {
      // If there are workflows this user can change:
      if (count($workflow_elements) > 0) {
        webform_workflows_element_reduce_form_to_workflow($form, $form_state, $workflow_elements);
      }
      else {
        $form['#access'] = FALSE;
      }
    }
  }
}

/**
 * After the form is built, ensure the options for transitions are correct.
 */
function webform_workflows_element_element_form_after_build($form, &$form_state) {
  /** @var \Drupal\webform\WebformSubmissionForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
  $webform_submission = $form_object->getEntity();

  if (!isset($form['elements'])) {
    return $form;
  }

  foreach ($form['elements'] as $element_id => $element) {
    if (!isset($element['#type']) || $element['#type'] != 'webform_workflows_element') {
      continue;
    }

    if (!isset($form['elements'][$element_id]['workflow_fieldset'])) {
      continue;
    }

    $blankOption = '';
    $options = isset($form['elements'][$element_id]['workflow_fieldset']['transition']) ? $form['elements'][$element_id]['workflow_fieldset']['transition']['#options'] : ['' => $blankOption];

    // Limit to available transitions.
    // We can't do this in src/Element/WebformWorkflowsElement.php getCompositeElements
    // because it gets in a loop as it tries to load the submission while building the submission.
    $availableTransitions = Drupal\webform_workflows_element\Element\WebformWorkflowsElement::getAvailableTransitions($element, $webform_submission);
    $availableTransitionsKeys = array_keys($availableTransitions);

    $newOptions = [];
    $newOptions[''] = $options[''] ?: $blankOption;
    foreach ($availableTransitions as $key => $transition) {
      $newOptions[$key] = $transition->label();
    }

    $form['elements'][$element_id]['workflow_fieldset']['transition']['#options'] = $newOptions;

    // Allow showing a transition note if e.g. access checks have made transitions not available for some reason:
    $context = [
      'element' => $element,
      'available_transitions' => $availableTransitions,
      'webform_submission' => $webform_submission,
      'form' => $form,
      'form_state' => $form_state,
    ];
    $transitionMessage = NULL;
    Drupal::moduleHandler()
      ->alter(['webform_workflow_element_transition_note'], $transitionMessage, $context);

    if ($transitionMessage) {
      $form['elements'][$element_id]['workflow_fieldset'][] = [
        'transition_note' => [
          '#type' => 'webform_message',
          '#message_message' => $transitionMessage,
          '#message_type' => 'info',
          '#message_close' => TRUE,
          '#message_storage' => WebformMessage::STORAGE_SESSION,
        ],
      ];
    }
  }
  return $form;
}

/**
 * Implements hook_webform_element_ELEMENT_TYPE_alter().
 */
function webform_workflows_element_webform_element_webform_workflows_element_alter(array &$element, FormStateInterface $form_state, array $context) {
}

/**
 * Turn a webform submission edit form into just a workflow edit form.
 *
 * @param array $form
 *   Form array.
 * @param array $workflow_elements
 *   Array of any workflow elements on the form.
 */
function webform_workflows_element_reduce_form_to_workflow(array &$form, FormStateInterface $form_state, array $workflow_elements) {
  // Remove all other elements, so it's just a workflow editor:
  foreach ($form['elements'] as $elementId => $element) {
    if (!in_array($elementId, array_keys($workflow_elements))) {
      unset($form['elements'][$elementId]);
    }
  }
  unset($form['navigation']);
  unset($form['information']);
  unset($form['progress']);
  unset($form['actions']['cards_prev']);
  unset($form['actions']['cards_next']);
  unset($form['webform_message']);
  unset($form['log_fieldset']);
  unset($form['author']);
  unset($form['required']);

  // @todo only show button if transition value changed:
  // $form['actions']['submit']['#states'] = [
  //   'visible' => [
  //     ':input[name$="transition]"]' => ['!value' => ''],
  //   ],
  // ];

  // Rename button as it's only a workflow form
  // Or hide if no transitions:
  $transitionsAvailable = 0;
  foreach ($workflow_elements as $element_id => $workflow_element) {
    if (isset($form['elements'][$element_id])) {
      $fieldset = $form['elements'][$element_id]['#webform_composite_elements']['workflow_fieldset'] ?? NULL;
      if ($fieldset) {
        $options = $fieldset['transition']['#options'] ?? [];
        $transitionsAvailable += count($options);
      }
    }
  }
  if ($transitionsAvailable) {
    $form['actions']['submit']['#value'] = t('Save workflow');
  }
  else {
    unset($form['actions']['submit']);
  }

  // If we are specifying a workflow element in the query string,
  // hide others and rename action button:
  if (Drupal::request()->query->get('workflow_element')) {
    $workflowsManager = Drupal::service('webform_workflows_element.manager');

    foreach ($workflow_elements as $element_id => $workflow_element) {
      // If an element is specified in the query string, hide any other workflow elements
      if (
        Drupal::request()->query->get('workflow_element') != $element_id
      ) {
        unset($form['elements'][$element_id]);
        continue;
      }

      // Set button text to the transition name:
      // Setting the default transition from the query string is handled in:
      // src/Element/WebformWorkflowsElement.php
      $preset_transition_id = Drupal::request()->query->get('transition');
      $workflow_id = $form['elements'][$element_id]['#workflow'];
      $workflowType = $workflowsManager->getWorkflowType($workflow_id);
      if ($preset_transition_id && $workflowType && $transition = $workflowType->getTransition($preset_transition_id)) {
        $form['actions']['submit']['#value'] = $transition->label();
      }
    }
  }
}

/**
 * Get a rendered table of which webforms use a specific workflow.
 *
 * This is shown on the workflow edit form.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function webform_workflows_element_add_webforms_to_workflow_edit(array &$form, FormStateInterface $form_state) {

  $workflow = $form_state->getFormObject()->getEntity();
  $workflowType = $workflow->getTypePlugin();
  if ($workflowType->getPluginId() != 'webform_workflows_element') {
    return;
  }

  $workflowsManager = Drupal::service('webform_workflows_element.manager');

  $webformsWithWorkflows = $workflowsManager->getWebformsWithWorkflowElements($workflow->id());
  $links = [];
  foreach ($webformsWithWorkflows as $webform) {
    $links[] = $webform->toLink()->toString();
  }

  $form['workflows_in_use'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => 'Webforms using this workflow',
  ];

  if (count($links) > 0) {
    $form['workflows_in_use'][] = [
      '#type' => 'markup',
      '#markup' => '<ul><li>' . implode('</li><li>', $links) . '</li></ul>',
    ];
  }
  else {
    $form['workflows_in_use'][] = [
      '#type' => 'markup',
      '#markup' => t('No webforms use this workflow.'),
    ];
  }
}

/**
 * Implements hook_webform_submission_form_alter().
 */
function webform_workflows_element_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  /** @var WebformSubmissionForm $form_object */
  $form_object = $form_state->getFormObject();

  /** @var WebformSubmissionInterface $webform_submission */
  $webform_submission = $form_object->getEntity();

  // Workflow log:
  $editForm = strpos($form_id, '_add_form') === FALSE;
  if ($editForm) {
    $notCanonical = Drupal::routeMatch()
        ->getRouteName() !== 'entity.webform_submission.canonical';
    $enabledForForm = webform_workflows_element_check_show_log('edit', $webform_submission);
    if ($notCanonical && $enabledForForm) {
      $form = array_merge(
        webform_workflows_element_get_rendered_log($webform_submission),
        $form
      );
    }
  }
}

/**
 * Make the change to workflow state after checking access.
 *
 * Also log it in webform logs.
 *
 * @param WebformSubmission $webform_submission
 */
function webform_workflows_element_webform_submission_presave(WebformSubmission $webform_submission) {
  $workflowsManager = Drupal::service('webform_workflows_element.manager');

  $webform = $webform_submission->getWebform();
  $workflow_elements = $workflowsManager->getWorkflowElementsForWebform($webform);

  foreach ($workflow_elements as $element_id => $element) {
    $workflowsManager->runTransition($webform_submission, $element_id);
  }
}

/**
 * Implements hook_webform_submission_access().
 *
 * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 */
function webform_workflows_element_webform_submission_access(WebformSubmissionInterface $webform_submission, $operation, AccountInterface $account): AccessResultInterface {
  // Allow access to edit submissions if at certain workflow states:
  // Set on access tab of workflow element.
  if ($operation == 'update') {
    $workflowsManager = Drupal::service('webform_workflows_element.manager');
    $webform = $webform_submission->getWebform();
    $workflow_elements = $workflowsManager->getWorkflowElementsForWebform($webform);

    // Ignore if no workflow elements.
    if (count($workflow_elements) == 0) {
      return AccessResult::neutral();
    }

    // By default, we don't have an opinion.
    $newAccess = AccessResult::neutral();

    // For each element, check if there's a status that allows this:
    foreach ($workflow_elements as $workflow_element_id => $workflow_element) {
      $state_id = NULL;

      // Get current state ID:
      $workflow_data = $webform_submission->getElementData($workflow_element_id);
      if (isset($workflow_data['workflow_state']) && $workflow_data['workflow_state']) {
        $state_id = $workflow_data['workflow_state'];
      }
      elseif ($initial_state = $workflowsManager->getInitialStateForElement($workflow_element)) {
        $state_id = $initial_state->id();
      }

      // Check if any access based on state:
      if ($state_id) {
        $newAccess = $workflowsManager->checkAccessToUpdateBasedOnState($account, $webform_submission, $workflow_element, $state_id);

        // With multiple workflow elements, take the first clear opinion on access.
        if (!$newAccess->isNeutral()) {
          return $newAccess;
        }
      }
    }
    return $newAccess;
  }

  return AccessResult::neutral();
}

/* ************************************************************************** */
// Theme hooks.
/* ************************************************************************** */

/**
 * Implements hook_theme().
 */
function webform_workflows_element_theme(): array {
  return [
    'webform_workflows_element' => [
      'render element' => 'element',
    ],
    'webform_workflows_element_value' => [
      'variables' => [
        'element' => NULL,
        'values' => NULL,
        'color_class' => NULL,
      ],
    ],
    'webform_handler_workflows_transition_email_summary' => [
      'variables' => [
        'settings' => NULL,
        'handler' => NULL,
      ],
    ],
  ];
}

/**
 * Add variables for template when displaying value of workflow element.
 *
 * @param array $variables
 *   Variables from theme, by reference.
 *
 * @see webform-workflows-element-value.html.twig
 */
function template_preprocess_webform_workflows_element_value(array &$variables) {
  if (isset($variables['values']['workflow_state'])) {
    // Provide colour class:
    $color_css = webform_workflows_element_get_color_class_for_state_from_element($variables['element'], $variables['values']['workflow_state']);
    if ($color_css) {
      $variables['color_class'] = 'with-color ' . $color_css;
    }
  }

  $changedUser = isset($variables['values']['changed_user']) ? User::load($variables['values']['changed_user']) : NULL;
  $variables['values']['changed_user_name'] = $changedUser ? $changedUser->getDisplayName() : NULL;
}

/**
 * Return true if transition is enabled.
 *
 * This does not check access, just that the webform allows the transition at
 * all.
 *
 * @param array $element
 * @param string $transition_id
 *
 * @return bool
 */
function webform_workflows_element_check_transition_enabled(array $element, string $transition_id): bool {
  $enabled_key = '#access_transition_' . $transition_id . '_workflow_enabled';
  // Either key is not set (which means enabled by default),
  // or key is set and TRUE.
  return $element && (!isset($element[$enabled_key])) || (isset($element[$enabled_key]) && $element[$enabled_key]);
}

/**
 * Implements hook_entity_operation_alter().
 *
 * Add each enabled transition as an entity operation on the submission.
 *
 * @throws Exception
 */
function webform_workflows_element_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity instanceof WebformSubmissionInterface) {
    /** @var WebformWorkflowsManager $workflows_manager */
    $workflows_manager = Drupal::service('webform_workflows_element.manager');
    $workflow_elements = $workflows_manager->getWorkflowElementsForWebform($entity->getWebform());
    foreach ($workflow_elements as $element_id => $element) {
      $workflow_id = $element['#workflow'];
      $workflow = Workflow::load($workflow_id);

      // Only load transitions that are available for the current state:
      $elementValue = $entity->getElementData($element_id);
      $current_state = $elementValue['workflow_state'] ?? NULL;
      $transitions = $workflows_manager->getAvailableTransitionsForWorkflow($workflow_id, $current_state, NULL, $entity->getWebform(), $entity);

      foreach ($transitions as $transition) {
        // Only show transitions enabled for this element/form:
        if (!webform_workflows_element_check_transition_enabled($element, $transition->id())) {
          continue;
        }

        $title = t('@element_label: @transition', [
          '@element_label' => $element['#title'] ?: $workflow->label(),
          '@transition' => $transition->label(),
        ]);

        $operations['webform_workflow_' . $element['#workflow'] . '_' . $transition->id()] = [
          'title' => $title,
          'url' => Url::fromRoute('entity.webform.transition', [
            'webform' => $entity->getWebform()->id(),
            'webform_submission' => $entity->id(),
            'workflow_element' => $element_id,
            'transition' => $transition->id(),
          ]),
          'weight' => 100 + $transition->weight(),
        ];
      }
    }
  }
}

function webform_workflows_element_get_webform_access_operations($webform) {
  $operations = [];

  // For workflow elements we want to add access rules for each transition and each state ("update at state").

  /** @var WebformWorkflowsManager $workflows_manager */
  $workflows_manager = Drupal::service('webform_workflows_element.manager');

  $workflowElements = $workflows_manager->getWorkflowElementsForWebform($webform);

  foreach ($workflowElements as $element_id => $element) {
    $workflowType = $workflows_manager->getWorkflowTypeFromElement($element);
    if ($workflowType) {
      foreach ($workflowType->getTransitions() as $transition) {
        $operations[] = 'transition_' . $transition->id();
      }
    }

    foreach ($workflows_manager->getStatesFromElement($element) as $state) {
      $operations[] = 'update_at_state_' . $state->id();
    }
  }
  return $operations;
}

function webform_workflows_element_add_reassign_submission_states_on_delete(&$form, $form_state) {
  $workflow = Drupal::routeMatch()->getParameter('workflow');
  $workflowType = $workflow->getTypePlugin();

  if ($workflowType->getPluginId() != 'webform_workflows_element') {
    return;
  }

  $state_id = Drupal::routeMatch()->getParameter('workflow_state');

  $states = $workflowType->getStates();
  $options = [];
  foreach ($states as $state) {
    if ($state->id() != $state_id) {
      $options[$state->id()] = $state->label();
    }
  }
  $form['reassign_fieldset'] = [
    '#type' => 'fieldset',
    '#title' => 'Reassign submissions on delete',
    'reassign' => [
      '#type' => 'checkbox',
      '#title' => t('Reassign any submission workflow elements at this current state to another workflow state?'),
    ],
    'reassign_state' => [
      '#type' => 'select',
      '#title' => t('Select state'),
      '#options' => $options,
      '#states' => [
        'visible' => [
          ':input[name="reassign"]' => ['checked' => TRUE],
        ],
      ],
    ],
  ];

  $form['#submit'] = array_merge(['webform_workflows_element_add_reassign_submission_states_on_delete_submit'], $form['#submit']);
}


/**
 * Reassign any workflow element value to a different state if a state is
 * deleted and the user selects to.
 *
 * @param $form
 * @param $form_state
 *
 * @return void
 */
function webform_workflows_element_add_reassign_submission_states_on_delete_submit($form, $form_state) {
  $reassign = $form_state->getValue('reassign');
  if (!$reassign) {
    return;
  }

  $workflow = Drupal::routeMatch()->getParameter('workflow');

  // Work out state values:
  $states = $workflow->getTypePlugin()->getStates();
  $new_state_id = $form_state->getValue('reassign_state');
  if (!$new_state_id) {
    return;
  }
  $new_state_label = $states[$new_state_id] ? $states[$new_state_id]->label() : $new_state_id;

  $previous_state_id = Drupal::routeMatch()->getParameter('workflow_state');
  if (!$previous_state_id) {
    return;
  }
  $previous_state_label = $states[$previous_state_id] ? $states[$previous_state_id]->label() : $previous_state_id;

  // Load all webforms which use this workflow:
  $workflowsManager = Drupal::service('webform_workflows_element.manager');
  $webformIdsWithWorkflows = $workflowsManager->getWebformsWithWorkflowElementsIds($workflow->id());
  foreach ($webformIdsWithWorkflows as $webform_id) {
    // Load any elements using this workflow:
    $workflow_elements = $workflowsManager->getWorkflowElementsForWebform(Webform::load($webform_id));

    foreach ($workflow_elements as $workflow_element_id => $workflow_element) {
      if ($workflow_element['#workflow'] !== $workflow->id()) {
        continue;
      }

      // Update submission with new state:
      $query = Database::getConnection()->update('webform_submission_data')
        ->fields([
          'value' => $new_state_id,
        ])
        ->condition('name', $workflow_element_id)
        ->condition('property', 'workflow_state')
        ->condition('value', $previous_state_id)
        ->condition('webform_id', $webform_id);
      $query->execute();

      // Update label of state:
      $query = Database::getConnection()->update('webform_submission_data')
        ->fields([
          'value' => $new_state_label,
        ])
        ->condition('name', $workflow_element_id)
        ->condition('property', 'workflow_state_label')
        ->condition('value', $previous_state_label)
        ->condition('webform_id', $webform_id);
      $query->execute();
    }

    // Clear cache for webform:
    Cache::invalidateTags(['config:webform.webform.' . $webform_id]);
  }

  // Clear cache for all submissions:
  Cache::invalidateTags(['webform_submission_list']);

  Drupal::messenger()
    ->addStatus(t('Moved any submissions using "@workflow_label" workflow, at state "@previous_state_label", to "@new_state_label".', [
      '@workflow_label' => $workflow->label(),
      '@previous_state_label' => $previous_state_label,
      '@new_state_label' => $new_state_label,
    ]));

}
