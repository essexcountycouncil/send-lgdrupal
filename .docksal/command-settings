source $PROJECT_ROOT/.docksal/docksal.env

#-------------------------- Helper functions -------------------------------

# Console colors
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

if_failed ()
{
  if [ ! $? -eq 0 ]; then
    if [[ "$1" == "" ]]; then msg="an error occurred"; else msg="$1"; fi
    echo-red "$msg";
    exit 1;
  fi
}

# Copy a settings file.
# Skips if the destination file already exists.
# @param $1 source file
# @param $2 destination file
copy_settings_file()
{
    local source=${1}
    local dest=${2}

    if [[ ! -f $dest ]]; then
        echo-green "Copying ${dest}..."
        cp $source $dest
    else
        echo-yellow "${dest} already in place."
    fi
}

# Ensure containers are up
ensure_containers_up()
{
    # Reset error reporting variable
    UP_ERROR=0

    # Check whether any containers exists
    if ! fin ps | grep '_web_1' &>/dev/null; then
      # Nothing there, let's start things
      fin up
    fi

    # Grep the output of fin status to check possible container status
    if fin ps | grep 'Exit' &>/dev/null; then
      UP_ERROR=1
    fi

    if [ $UP_ERROR == 1 ]; then
      echo-red "You have one or more stopped containers, attempting to start"
      # Call start container command
      fin start
      echo-yellow "Re-checking containers"
      if fin ps | grep 'Exit' &>/dev/null; then
        # echo-green "cli container down"
        echo-red "Something still seems to be wrong. Best stop here and check it out"
        exit 1
      fi
    fi
}

# Copy environment config
copy_environment_configuration()
{
    if [[ $1 == '--main' || $2 == '--main' ]]; then
      local FILE_NAME='settings.php'
    else
      local FILE_NAME='settings.local.php'
    fi

    if [[ $1 != '--no-cache' ]]; then

      echo-yellow "Copying configuration files"
      chmod 775 ${SITEDIR_PATH}

      if [[ -f ${SITEDIR_PATH}/${FILE_NAME} ]]; then
        chmod 664 ${SITEDIR_PATH}/${FILE_NAME}
        rm -f ${SITEDIR_PATH}/${FILE_NAME}
      fi

      local PROJECT_NAME=$(echo $VIRTUAL_HOST | sed -e 's/\.[A-Za-z0-9_-]\+/.*/g')

      sed -e "s/\${VIRTUAL_HOST}/${VIRTUAL_HOST}/" \
          -e "s/\${PROJECT_NAME}/${PROJECT_NAME}/" \
          -e "s#\${STAGE_FILE_PROXY_URL}#${STAGE_FILE_PROXY_URL}#" \
          "${PROJECT_ROOT}/.docksal/template.settings.local.php" \
      | tee "${SITEDIR_PATH}/${FILE_NAME}" >/dev/null
    else
      copy_environment_no_cache_configuration $1 $2
    fi

    copy_project_configuration
}

# Copy environment no-cache config
copy_environment_no_cache_configuration()
{
    echo-yellow "Copying no-cache settings.local.php file"

    if [[ $1 == '--main' || $2 == '--main' ]]; then
      local FILE_NAME='settings.php'
    else
      local FILE_NAME='settings.local.php'
    fi

    if [[ -f ${SITEDIR_PATH}/${FILE_NAME} ]]; then
        chmod 664 ${SITEDIR_PATH}/${FILE_NAME}
        rm -f ${SITEDIR_PATH}/${FILE_NAME}
    fi

    local PROJECT_NAME=$(echo $VIRTUAL_HOST | sed -e 's/\.[A-Za-z0-9_-]\+/.*/g')

    sed -e "s/\${VIRTUAL_HOST}/${VIRTUAL_HOST}/" \
        -e "s/\${PROJECT_NAME}/${PROJECT_NAME}/" \
        -e "s#\${STAGE_FILE_PROXY_URL}#${STAGE_FILE_PROXY_URL}#" \
        "${PROJECT_ROOT}/.docksal/template.nocache.settings.local.php" \
    | tee "${SITEDIR_PATH}/settings.local.php" >/dev/null

    echo-yellow "Copying development.services.yml file"
    cp "${PROJECT_ROOT}/.docksal/template.development.services.yml" "${SITEDIR_PATH}/development.services.yml"

    copy_project_configuration
}

# Copy project specific config
copy_project_configuration()
{
    if [[ -f ${PROJECT_ROOT}/.docksal/settings.project.php ]]; then
      echo-yellow "Copying project setting file"
      cp "${PROJECT_ROOT}/.docksal/settings.project.php" "${SITEDIR_PATH}/settings.project.php"
    fi
}

# Build-time installs - Run things which are in .platform.app.yaml but have to be run inside the containers
build_extras()
{
    # Any extra things which need to be completed locally for set-up
    cd ${DOCROOT_PATH}
    fin drush -y cim
    fin drush -y updb
    fin drush -y entity-updates
}

# run a command and test for output
function check {
    "$@"
    local status=$?
    if [ $status -ne 0 ]; then
        echo "error with $1" >&2
    fi
    return $status
}

# Check for the SECRET_PLATFORMSH_CLI_TOKEN environment variable
PLATFORM_CMD="platform"
if [[ ! -z "$SECRET_PLATFORMSH_CLI_TOKEN" ]]; then
  PLATFORM_CMD="fin platform"
fi


#-------------------------- END: Helper functions ----------------------------
