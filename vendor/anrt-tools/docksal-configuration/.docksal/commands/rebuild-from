#!/usr/bin/env bash

## Re-builds local environment, imports DB, does cim and everything
##
## Usage: fin rebuild
##           --no-cache     Use no-cache config files.
##           --no-compile   Do NOT compile CSS as part of the build process.
##           --fe           Front-end friendly settings and defaults.
##

source ${DOCKSAL_PATH}/.docksal/helpers

check_override $@

if [ -z $1 ] || [[ $1 == "--fetch" ]]; then
  echo-green "Environment not specified. Using checked out Git branch."
  env=$(git rev-parse --abbrev-ref HEAD)
else
  env=$1
fi

# States if we want CSS compiled inside the cotainer.
css_compile=0

# Frontend friendly settings.
if [[ $1 == "--fe" || $2 == "--fe" || $3 == "--fe" || $4 == "--fe" ]]; then
  no_cache="--no-cache"
  css_compile=0
fi

if [[ $1 == "--no-cache" || $2 == "--no-cache" || $3 == "--no-cache" || $4 == "--no-cache" ]]; then
  no_cache="--no-cache"
else
  no_cache=
fi

if [[ $1 == "--no-compile" || $2 == "--no-compile" || $3 == "--no-compile" || $4 == "--no-compile" ]]; then
  css_compile=0
fi

echo "Rebuilding local site. Hang onâ€¦"
# Make sure we're in the right place for a build
cd ${PROJECT_ROOT}

# Check container status before proceeding
ensure_containers_up

$PLATFORM_CMD build --no-backup --no-cache --no-build-hooks

# Copy config files
copy_environment_configuration ${no_cache} --force

# Import the DB, force download
fin remote-db ${env} --fetch

# No need to compile CSS for now.
if [[ ${css_compile} == 1 ]]; then
  fin css-compile
fi

build_extras
